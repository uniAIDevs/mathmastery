/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Scenario } from "./Scenario";
import { ScenarioCountArgs } from "./ScenarioCountArgs";
import { ScenarioFindManyArgs } from "./ScenarioFindManyArgs";
import { ScenarioFindUniqueArgs } from "./ScenarioFindUniqueArgs";
import { CreateScenarioArgs } from "./CreateScenarioArgs";
import { UpdateScenarioArgs } from "./UpdateScenarioArgs";
import { DeleteScenarioArgs } from "./DeleteScenarioArgs";
import { LearningPath } from "../../learningPath/base/LearningPath";
import { ScenarioService } from "../scenario.service";
@graphql.Resolver(() => Scenario)
export class ScenarioResolverBase {
  constructor(protected readonly service: ScenarioService) {}

  async _scenariosMeta(
    @graphql.Args() args: ScenarioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Scenario])
  async scenarios(
    @graphql.Args() args: ScenarioFindManyArgs
  ): Promise<Scenario[]> {
    return this.service.scenarios(args);
  }

  @graphql.Query(() => Scenario, { nullable: true })
  async scenario(
    @graphql.Args() args: ScenarioFindUniqueArgs
  ): Promise<Scenario | null> {
    const result = await this.service.scenario(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Scenario)
  async createScenario(
    @graphql.Args() args: CreateScenarioArgs
  ): Promise<Scenario> {
    return await this.service.createScenario({
      ...args,
      data: {
        ...args.data,

        learningPath: args.data.learningPath
          ? {
              connect: args.data.learningPath,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Scenario)
  async updateScenario(
    @graphql.Args() args: UpdateScenarioArgs
  ): Promise<Scenario | null> {
    try {
      return await this.service.updateScenario({
        ...args,
        data: {
          ...args.data,

          learningPath: args.data.learningPath
            ? {
                connect: args.data.learningPath,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Scenario)
  async deleteScenario(
    @graphql.Args() args: DeleteScenarioArgs
  ): Promise<Scenario | null> {
    try {
      return await this.service.deleteScenario(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => LearningPath, {
    nullable: true,
    name: "learningPath",
  })
  async getLearningPath(
    @graphql.Parent() parent: Scenario
  ): Promise<LearningPath | null> {
    const result = await this.service.getLearningPath(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
