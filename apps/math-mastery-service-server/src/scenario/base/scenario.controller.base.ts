/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScenarioService } from "../scenario.service";
import { ScenarioCreateInput } from "./ScenarioCreateInput";
import { Scenario } from "./Scenario";
import { ScenarioFindManyArgs } from "./ScenarioFindManyArgs";
import { ScenarioWhereUniqueInput } from "./ScenarioWhereUniqueInput";
import { ScenarioUpdateInput } from "./ScenarioUpdateInput";

export class ScenarioControllerBase {
  constructor(protected readonly service: ScenarioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Scenario })
  async createScenario(
    @common.Body() data: ScenarioCreateInput
  ): Promise<Scenario> {
    return await this.service.createScenario({
      data: {
        ...data,

        learningPath: data.learningPath
          ? {
              connect: data.learningPath,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        id: true,

        learningPath: {
          select: {
            id: true,
          },
        },

        problemStatement: true,
        relatedVisualization: true,
        solution: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Scenario] })
  @ApiNestedQuery(ScenarioFindManyArgs)
  async scenarios(@common.Req() request: Request): Promise<Scenario[]> {
    const args = plainToClass(ScenarioFindManyArgs, request.query);
    return this.service.scenarios({
      ...args,
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        id: true,

        learningPath: {
          select: {
            id: true,
          },
        },

        problemStatement: true,
        relatedVisualization: true,
        solution: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Scenario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scenario(
    @common.Param() params: ScenarioWhereUniqueInput
  ): Promise<Scenario | null> {
    const result = await this.service.scenario({
      where: params,
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        id: true,

        learningPath: {
          select: {
            id: true,
          },
        },

        problemStatement: true,
        relatedVisualization: true,
        solution: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Scenario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScenario(
    @common.Param() params: ScenarioWhereUniqueInput,
    @common.Body() data: ScenarioUpdateInput
  ): Promise<Scenario | null> {
    try {
      return await this.service.updateScenario({
        where: params,
        data: {
          ...data,

          learningPath: data.learningPath
            ? {
                connect: data.learningPath,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          createdBy: true,
          description: true,
          id: true,

          learningPath: {
            select: {
              id: true,
            },
          },

          problemStatement: true,
          relatedVisualization: true,
          solution: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Scenario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScenario(
    @common.Param() params: ScenarioWhereUniqueInput
  ): Promise<Scenario | null> {
    try {
      return await this.service.deleteScenario({
        where: params,
        select: {
          createdAt: true,
          createdBy: true,
          description: true,
          id: true,

          learningPath: {
            select: {
              id: true,
            },
          },

          problemStatement: true,
          relatedVisualization: true,
          solution: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
