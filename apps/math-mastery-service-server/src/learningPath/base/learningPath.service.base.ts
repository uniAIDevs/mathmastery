/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LearningPath as PrismaLearningPath,
  ProgressReport as PrismaProgressReport,
  Scenario as PrismaScenario,
} from "@prisma/client";

export class LearningPathServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LearningPathCountArgs, "select">
  ): Promise<number> {
    return this.prisma.learningPath.count(args);
  }

  async learningPaths<T extends Prisma.LearningPathFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningPathFindManyArgs>
  ): Promise<PrismaLearningPath[]> {
    return this.prisma.learningPath.findMany<Prisma.LearningPathFindManyArgs>(
      args
    );
  }
  async learningPath<T extends Prisma.LearningPathFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningPathFindUniqueArgs>
  ): Promise<PrismaLearningPath | null> {
    return this.prisma.learningPath.findUnique(args);
  }
  async createLearningPath<T extends Prisma.LearningPathCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningPathCreateArgs>
  ): Promise<PrismaLearningPath> {
    return this.prisma.learningPath.create<T>(args);
  }
  async updateLearningPath<T extends Prisma.LearningPathUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningPathUpdateArgs>
  ): Promise<PrismaLearningPath> {
    return this.prisma.learningPath.update<T>(args);
  }
  async deleteLearningPath<T extends Prisma.LearningPathDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningPathDeleteArgs>
  ): Promise<PrismaLearningPath> {
    return this.prisma.learningPath.delete(args);
  }

  async findProgressReports(
    parentId: string,
    args: Prisma.ProgressReportFindManyArgs
  ): Promise<PrismaProgressReport[]> {
    return this.prisma.learningPath
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .progressReports(args);
  }

  async findScenarios(
    parentId: string,
    args: Prisma.ScenarioFindManyArgs
  ): Promise<PrismaScenario[]> {
    return this.prisma.learningPath
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scenarios(args);
  }
}
