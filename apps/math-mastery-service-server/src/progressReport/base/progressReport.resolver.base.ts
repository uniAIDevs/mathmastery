/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProgressReport } from "./ProgressReport";
import { ProgressReportCountArgs } from "./ProgressReportCountArgs";
import { ProgressReportFindManyArgs } from "./ProgressReportFindManyArgs";
import { ProgressReportFindUniqueArgs } from "./ProgressReportFindUniqueArgs";
import { CreateProgressReportArgs } from "./CreateProgressReportArgs";
import { UpdateProgressReportArgs } from "./UpdateProgressReportArgs";
import { DeleteProgressReportArgs } from "./DeleteProgressReportArgs";
import { LearningPath } from "../../learningPath/base/LearningPath";
import { ProgressReportService } from "../progressReport.service";
@graphql.Resolver(() => ProgressReport)
export class ProgressReportResolverBase {
  constructor(protected readonly service: ProgressReportService) {}

  async _progressReportsMeta(
    @graphql.Args() args: ProgressReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProgressReport])
  async progressReports(
    @graphql.Args() args: ProgressReportFindManyArgs
  ): Promise<ProgressReport[]> {
    return this.service.progressReports(args);
  }

  @graphql.Query(() => ProgressReport, { nullable: true })
  async progressReport(
    @graphql.Args() args: ProgressReportFindUniqueArgs
  ): Promise<ProgressReport | null> {
    const result = await this.service.progressReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProgressReport)
  async createProgressReport(
    @graphql.Args() args: CreateProgressReportArgs
  ): Promise<ProgressReport> {
    return await this.service.createProgressReport({
      ...args,
      data: {
        ...args.data,

        learningPath: args.data.learningPath
          ? {
              connect: args.data.learningPath,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProgressReport)
  async updateProgressReport(
    @graphql.Args() args: UpdateProgressReportArgs
  ): Promise<ProgressReport | null> {
    try {
      return await this.service.updateProgressReport({
        ...args,
        data: {
          ...args.data,

          learningPath: args.data.learningPath
            ? {
                connect: args.data.learningPath,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProgressReport)
  async deleteProgressReport(
    @graphql.Args() args: DeleteProgressReportArgs
  ): Promise<ProgressReport | null> {
    try {
      return await this.service.deleteProgressReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => LearningPath, {
    nullable: true,
    name: "learningPath",
  })
  async getLearningPath(
    @graphql.Parent() parent: ProgressReport
  ): Promise<LearningPath | null> {
    const result = await this.service.getLearningPath(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
