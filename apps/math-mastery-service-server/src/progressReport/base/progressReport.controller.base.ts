/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProgressReportService } from "../progressReport.service";
import { ProgressReportCreateInput } from "./ProgressReportCreateInput";
import { ProgressReport } from "./ProgressReport";
import { ProgressReportFindManyArgs } from "./ProgressReportFindManyArgs";
import { ProgressReportWhereUniqueInput } from "./ProgressReportWhereUniqueInput";
import { ProgressReportUpdateInput } from "./ProgressReportUpdateInput";

export class ProgressReportControllerBase {
  constructor(protected readonly service: ProgressReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProgressReport })
  async createProgressReport(
    @common.Body() data: ProgressReportCreateInput
  ): Promise<ProgressReport> {
    return await this.service.createProgressReport({
      data: {
        ...data,

        learningPath: data.learningPath
          ? {
              connect: data.learningPath,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        feedback: true,
        id: true,
        lastUpdated: true,

        learningPath: {
          select: {
            id: true,
          },
        },

        progressPercentage: true,
        student: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProgressReport] })
  @ApiNestedQuery(ProgressReportFindManyArgs)
  async progressReports(
    @common.Req() request: Request
  ): Promise<ProgressReport[]> {
    const args = plainToClass(ProgressReportFindManyArgs, request.query);
    return this.service.progressReports({
      ...args,
      select: {
        createdAt: true,
        feedback: true,
        id: true,
        lastUpdated: true,

        learningPath: {
          select: {
            id: true,
          },
        },

        progressPercentage: true,
        student: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProgressReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async progressReport(
    @common.Param() params: ProgressReportWhereUniqueInput
  ): Promise<ProgressReport | null> {
    const result = await this.service.progressReport({
      where: params,
      select: {
        createdAt: true,
        feedback: true,
        id: true,
        lastUpdated: true,

        learningPath: {
          select: {
            id: true,
          },
        },

        progressPercentage: true,
        student: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProgressReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProgressReport(
    @common.Param() params: ProgressReportWhereUniqueInput,
    @common.Body() data: ProgressReportUpdateInput
  ): Promise<ProgressReport | null> {
    try {
      return await this.service.updateProgressReport({
        where: params,
        data: {
          ...data,

          learningPath: data.learningPath
            ? {
                connect: data.learningPath,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          feedback: true,
          id: true,
          lastUpdated: true,

          learningPath: {
            select: {
              id: true,
            },
          },

          progressPercentage: true,
          student: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProgressReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProgressReport(
    @common.Param() params: ProgressReportWhereUniqueInput
  ): Promise<ProgressReport | null> {
    try {
      return await this.service.deleteProgressReport({
        where: params,
        select: {
          createdAt: true,
          feedback: true,
          id: true,
          lastUpdated: true,

          learningPath: {
            select: {
              id: true,
            },
          },

          progressPercentage: true,
          student: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
