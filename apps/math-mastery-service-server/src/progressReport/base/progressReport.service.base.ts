/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProgressReport as PrismaProgressReport,
  LearningPath as PrismaLearningPath,
} from "@prisma/client";

export class ProgressReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProgressReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.progressReport.count(args);
  }

  async progressReports<T extends Prisma.ProgressReportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProgressReportFindManyArgs>
  ): Promise<PrismaProgressReport[]> {
    return this.prisma.progressReport.findMany<Prisma.ProgressReportFindManyArgs>(
      args
    );
  }
  async progressReport<T extends Prisma.ProgressReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProgressReportFindUniqueArgs>
  ): Promise<PrismaProgressReport | null> {
    return this.prisma.progressReport.findUnique(args);
  }
  async createProgressReport<T extends Prisma.ProgressReportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProgressReportCreateArgs>
  ): Promise<PrismaProgressReport> {
    return this.prisma.progressReport.create<T>(args);
  }
  async updateProgressReport<T extends Prisma.ProgressReportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProgressReportUpdateArgs>
  ): Promise<PrismaProgressReport> {
    return this.prisma.progressReport.update<T>(args);
  }
  async deleteProgressReport<T extends Prisma.ProgressReportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProgressReportDeleteArgs>
  ): Promise<PrismaProgressReport> {
    return this.prisma.progressReport.delete(args);
  }

  async getLearningPath(parentId: string): Promise<PrismaLearningPath | null> {
    return this.prisma.progressReport
      .findUnique({
        where: { id: parentId },
      })
      .learningPath();
  }
}
