/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Visualization } from "./Visualization";
import { VisualizationCountArgs } from "./VisualizationCountArgs";
import { VisualizationFindManyArgs } from "./VisualizationFindManyArgs";
import { VisualizationFindUniqueArgs } from "./VisualizationFindUniqueArgs";
import { CreateVisualizationArgs } from "./CreateVisualizationArgs";
import { UpdateVisualizationArgs } from "./UpdateVisualizationArgs";
import { DeleteVisualizationArgs } from "./DeleteVisualizationArgs";
import { VisualizationService } from "../visualization.service";
@graphql.Resolver(() => Visualization)
export class VisualizationResolverBase {
  constructor(protected readonly service: VisualizationService) {}

  async _visualizationsMeta(
    @graphql.Args() args: VisualizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Visualization])
  async visualizations(
    @graphql.Args() args: VisualizationFindManyArgs
  ): Promise<Visualization[]> {
    return this.service.visualizations(args);
  }

  @graphql.Query(() => Visualization, { nullable: true })
  async visualization(
    @graphql.Args() args: VisualizationFindUniqueArgs
  ): Promise<Visualization | null> {
    const result = await this.service.visualization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Visualization)
  async createVisualization(
    @graphql.Args() args: CreateVisualizationArgs
  ): Promise<Visualization> {
    return await this.service.createVisualization({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Visualization)
  async updateVisualization(
    @graphql.Args() args: UpdateVisualizationArgs
  ): Promise<Visualization | null> {
    try {
      return await this.service.updateVisualization({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Visualization)
  async deleteVisualization(
    @graphql.Args() args: DeleteVisualizationArgs
  ): Promise<Visualization | null> {
    try {
      return await this.service.deleteVisualization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
