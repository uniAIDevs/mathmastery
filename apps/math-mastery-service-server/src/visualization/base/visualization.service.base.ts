/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Visualization as PrismaVisualization } from "@prisma/client";

export class VisualizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VisualizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.visualization.count(args);
  }

  async visualizations<T extends Prisma.VisualizationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisualizationFindManyArgs>
  ): Promise<PrismaVisualization[]> {
    return this.prisma.visualization.findMany<Prisma.VisualizationFindManyArgs>(
      args
    );
  }
  async visualization<T extends Prisma.VisualizationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisualizationFindUniqueArgs>
  ): Promise<PrismaVisualization | null> {
    return this.prisma.visualization.findUnique(args);
  }
  async createVisualization<T extends Prisma.VisualizationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisualizationCreateArgs>
  ): Promise<PrismaVisualization> {
    return this.prisma.visualization.create<T>(args);
  }
  async updateVisualization<T extends Prisma.VisualizationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisualizationUpdateArgs>
  ): Promise<PrismaVisualization> {
    return this.prisma.visualization.update<T>(args);
  }
  async deleteVisualization<T extends Prisma.VisualizationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisualizationDeleteArgs>
  ): Promise<PrismaVisualization> {
    return this.prisma.visualization.delete(args);
  }
}
